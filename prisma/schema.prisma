// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  slug        String        @unique
  likes       Int           @default(0)
  views       Int           @default(0)
  PostComment PostComment[]
}

model PostFavorite {
  id        String   @id
  createdAt DateTime @default(now())
  likes     Int      @default(0)
}

model Project {
  id           String         @id @default(cuid())
  title        String
  slug         String         @unique
  description  String
  imageUrl     String
  githubUrl    String?
  demoUrl      String?
  content      String?        @db.Text
  isFeature    Boolean        @default(false)
  projectStack ProjectStack[]
  createdAt    DateTime       @default(now())
}

model ProjectStack {
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  stackId   String
  stack     Stack   @relation(fields: [stackId], references: [id])

  @@id([projectId, stackId])
  @@map("ProjectStack")
}

model Stack {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  name         String         @unique
  projectStack ProjectStack[]
}

model Certificate {
  id                  String   @id @default(cuid())
  url                 String   @unique
  title               String
  organizationName    String
  organizationLogoUrl String
  issueDate           DateTime
  createdAt           DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  guestbook           Guestbook[]
  PostComment         PostComment[]
  PostCommentReaction PostCommentReaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Guestbook {
  id        String   @id @default(cuid())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model PostComment {
  id                  String                @id @default(cuid())
  postId              String
  post                Post                  @relation(fields: [postId], references: [slug], onDelete: Cascade)
  userId              String
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  content             Json
  parentId            String?
  isDeleted           Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  PostCommentReaction PostCommentReaction[]
}

model PostCommentReaction {
  id        String      @id @default(cuid())
  commentId String
  comment   PostComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}
